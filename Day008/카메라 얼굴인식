using OpenCvSharp;
using OpenCvSharp.Extensions;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace CameraProject
{
    public partial class Form1 : Form
    {
        private VideoCapture capture;  // 카메라 캡처 객체
        private Mat frame;             // 현재 프레임을 저장할 객체
        private bool isRunning = false;  // 카메라가 실행 중인지 확인하는 변수
        private bool isColor = true;     // 컬러 모드인지 확인하는 변수
        private CascadeClassifier faceCascade; // 얼굴 감지 분류기 객체
        private bool isFaceDetectionEnabled = false;  // 얼굴 감지 기능 상태를 나타내는 변수
        private readonly object frameLock = new object();

        private void LoadCascadeClassifier()
        {
            // OpenCV에서 제공하는 Haar Cascade 분류기 파일을 로드합니다.
            faceCascade = new CascadeClassifier("C:\\Users\\LG\\source\\Test\\CameraProject\\CameraProject\\bin\\Debug\\haarcascade_frontalface_default.xml");
        }

        private void DetectFaces()
        {
            if (frame != null)
            {
                // 현재 프레임에서 얼굴을 감지합니다.
                Rect[] faces = faceCascade.DetectMultiScale(frame, 1.1, 3,HaarDetectionTypes.ScaleImage, new OpenCvSharp.Size(30, 30));

                // 감지된 얼굴 주위에 네모 박스를 그립니다.
                foreach (Rect face in faces)
                {
                    Cv2.Rectangle(frame, face, new Scalar(0, 255, 0), 2); // 녹색 네모 박스
                }

                pictureBox1.Image = BitmapConverter.ToBitmap(frame);
            }
        }

        public Form1()
        {
            InitializeComponent();
        }

        private async void button1_Click(object sender, EventArgs e)
        {
            if (isRunning)
            {
                isRunning = false;
                button1.Text = "Start";
                return;
            }

            button1.Text = "Stop";
            isRunning = true;

            // 비디오 캡처 및 얼굴 감지를 별도의 스레드에서 실행
            await Task.Run(() =>
            {
                while (isRunning)
                {
                    if (capture.IsOpened())
                    {
                        lock (frameLock) // 동기화 블록 시작
                        {
                            capture.Read(frame);

                            if (!isColor)
                            {
                                Cv2.CvtColor(frame, frame, ColorConversionCodes.BGR2GRAY);
                                Cv2.CvtColor(frame, frame, ColorConversionCodes.GRAY2BGR);
                            }

                            pictureBox1.Image = BitmapConverter.ToBitmap(frame);
                        } // 동기화 블록 종료
                    }
                }
            });
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            capture = new VideoCapture(0);  // 카메라 장치 연결
            frame = new Mat();
            capture.Set(VideoCaptureProperties.FrameWidth, 640);  // 프레임 너비 설정
            capture.Set(VideoCaptureProperties.FrameHeight, 480); // 프레임 높이 설정

            // picturebox1 크기에 맞게 조절
            pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;

            LoadCascadeClassifier();
        }

        private async void button2_Click(object sender, EventArgs e)
        {
            if (isFaceDetectionEnabled)
            {
                isFaceDetectionEnabled = false;
                button2.Text = "얼굴감지 ON";
            }
            else
            {
                isFaceDetectionEnabled = true;
                button2.Text = "얼굴감지 OFF";

                // 얼굴 감지를 별도의 스레드에서 실행
                await Task.Run(() =>
                {
                    while (isFaceDetectionEnabled)
                    {
                        lock (frameLock) // 동기화 블록 시작
                        {
                            if (frame != null)
                            {
                                Rect[] faces = faceCascade.DetectMultiScale(frame, 1.1, 3, HaarDetectionTypes.ScaleImage, new OpenCvSharp.Size(30, 30));

                                foreach (Rect face in faces)
                                {
                                    Cv2.Rectangle(frame, face, new Scalar(0, 255, 0), 2);
                                }

                                pictureBox1.Image = BitmapConverter.ToBitmap(frame);
                            }
                        } // 동기화 블록 종료
                    }
                });
            }
        }


        private void button3_Click(object sender, EventArgs e)
        {
            isColor = !isColor;  // 흑백 모드로 변경

            if(isColor)
            {
                button3.Text = "흑백 모드 ON";
            }
            else
            {
                button3.Text = "흑백 모드 OFF";
            }
        }

        private void button4_Click(object sender, EventArgs e)
        {

        }
    }
}
